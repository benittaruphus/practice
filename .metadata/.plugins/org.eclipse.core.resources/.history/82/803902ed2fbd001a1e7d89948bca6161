package com.ben.practice;

import java.util.HashMap;
import java.util.Map;

public class TapeEquilibrium {
	public static void main(String[] args)
	{
		Solution s = new Solution();
		int[] A = {4};
		int missing = s.solution(A);
		System.out.println(missing) ;
	}
}

class Solution {
    public int solution(int[] A) {
    
    	int aL = A.length;
        int smallest = 0;
        
        if(aL==0)
        {
            return 0;
        }
        if(aL==1)
        {
            return A[0];
        }
        int[] p = new int[aL-1];
        Map<Integer, Integer> tapeParts = new HashMap<>();
        int[] firstHalf = new int[aL-1];
        int[] secondHalf = new int[aL-1];
        for(int i = 1; i<aL; i++)
        {
        	firstHalf = firstHalf + A[i];
        	tapeParts.put(firstHalf, value);
        }
        
        return smallest;
    }
    
    int sum(int n)
    {
        int sum = (n*(n+1))/2;
        return sum;
    }
}

