package com.ben.practice;

import java.util.Arrays;

public class FrogRiverOne {
	public static void main(String[] args)
	{
		Solution s = new Solution();
		int[] A = {1, 3, 1, 2, 1};
		int missing = s.solution(1, A);
		System.out.println(missing) ;
	}
}

class Solution {
    public int solution(int X, int[] A) {
    	
    	int l = A.length;
        if(l<X)
        {
            return -1;
        }
//        if(X==1 && A[0]==1)
//        {
//            return 0;
//        }
        if(sum(X) == sum(l))
        {
            return X;
        }
        
        int[] leaves = new int[X+1];
        for(int i:A)
        {
        	if(i<=X)
        	{
        		leaves[i]=leaves[i]+1;
        	}
        }
        int fastest = 0;
        for(int i=1; i<=X; i++)
        {
        	
        	if (leaves[i]==0)
        	{
        		return -1;
        	}
        }
        fastest = Arrays.binarySearch(A, X);
        
        return fastest;
    }
    
    int sum(int x)
    {
        return (x*(x+1))/2;
    }
}
